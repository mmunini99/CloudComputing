# -*- mode: ruby -*-
# vi: set ft=ruby :

# Nodes
nodes = [
  { :hostname => "master-node1", :ip => "10.10.0.80" },
  { :hostname => "controlled-node2", :ip => "10.10.0.81" },
]

Vagrant.configure("2") do |config|
  
  # Base box and provider
  config.vm.box = "generic/fedora39"
  config.vm.provider :libvirt do |lv|
    lv.qemu_use_session = true
    lv.memory = 2048 #2GB --> requirement taks
    lv.cpus = 2 #2CPUs --> requirement taks
    lv.machine_type = "pc" # debug fixing due to host VM no KVM
  end

  # Provisioning
  nodes.each do |conf|
    config.vm.define conf[:hostname] do |node|

      # Hostname, disable synced folder and network
      node.vm.hostname = conf[:hostname]
      node.vm.synced_folder ".", "/vagrant", disabled: true
      node.vm.network :private_network,
                      :libvirt__network_name => 'net-config'

      # Common provisioning
      node.vm.provision :shell,
                        :path => './config_bash/init_set_up.sh',
                        :args => [ conf[:ip] ]

      # Docker files
      node.vm.provision :file,
                        :source => "./ompi_osu_docker",
                        :destination => "/home/vagrant/"

      # Master node provisioning
      if conf[:hostname] == "master-node1"
        node.vm.provision :shell,
                          :path => './config_bash/get_master_control.sh',
                          :privileged => true
        node.vm.provision :file,
                          :source => "./config_bash/get_flannel.sh",
                          :destination => "/home/vagrant/"
        node.vm.provision :file,
                          :source => "./config_bash/get_mpi.sh",
                          :destination => "/home/vagrant/"
        node.vm.provision :file,
                          :source => "./define_benchmark",
                          :destination => "/home/vagrant/"
      end

      # Worker node provisioning
      if conf[:hostname] == "controlled-node2"
        node.vm.provision :shell,
                          :path => './config_bash/get_controlled_control.sh',
                          :privileged => true
      end

      # Copy credentials for non-root user
      node.vm.provision :shell,
                        :path => './config_bash/get_credential.sh',
                        :privileged => true

      # Install docker MPI images
      node.vm.provision :shell,
                        :path => './config_bash/get_docker.sh',
                        :privileged => true

    end
  end

end
